"use client"

import { useEffect, useState, useRef } from "react"
import { models } from "powerbi-client"
import { PowerBIEmbed } from "powerbi-client-react"
import { FaSync } from "react-icons/fa"
import "./Analytics.css"

const Analytics = () => {
  const [isLoading, setIsLoading] = useState(true)
  const [reportConfig, setReportConfig] = useState(null)
  const [selectedMetric, setSelectedMetric] = useState("occupancy")
  const reportRef = useRef(null)

  // Simulate fetching Power BI embed config
  useEffect(() => {
    const fetchReportConfig = async () => {
      // In a real app, this would be an API call to your backend
      // which would generate the embed token and return the config
      setTimeout(() => {
        setReportConfig({
          type: "report",
          id: "your-report-id", // This would come from your Power BI workspace
          embedUrl: "https://app.powerbi.com/reportEmbed",
          tokenType: models.TokenType.Embed,
          accessToken: "your-access-token", // This would be generated by your backend
          settings: {
            panes: {
              filters: {
                expanded: false,
                visible: true,
              },
            },
            background: models.BackgroundType.Transparent,
          },
        })
        setIsLoading(false)
      }, 1500)
    }

    fetchReportConfig()
  }, [])

  const handleMetricChange = (metric) => {
    setSelectedMetric(metric)

    // In a real app, you would use the Power BI SDK to apply filters
    if (reportRef.current) {
      // Example of how you would filter the report
      // const filter = {
      //   $schema: "http://powerbi.com/product/schema#basic",
      //   target: {
      //     table: "Metrics",
      //     column: "MetricType"
      //   },
      //   operator: "In",
      //   values: [metric]
      // };
      // reportRef.current.getReport().then(report => {
      //   report.setFilters([filter]);
      // });
    }
  }

  const handleRefresh = () => {
    setIsLoading(true)

    // Simulate refreshing the report
    setTimeout(() => {
      setIsLoading(false)
    }, 1000)

    // In a real app, you would use the Power BI SDK to refresh the report
    // if (reportRef.current) {
    //   reportRef.current.getReport().then(report => {
    //     report.refresh();
    //   });
    // }
  }

  return (
    <div className="analytics-page fade-in">
      <div className="analytics-header">
        <h1 className="page-title">Facility Analytics</h1>
        <div className="analytics-actions">
          <div className="metric-selector">
            <button
              className={`metric-btn ${selectedMetric === "occupancy" ? "active" : ""}`}
              onClick={() => handleMetricChange("occupancy")}
            >
              Occupancy
            </button>
            <button
              className={`metric-btn ${selectedMetric === "energy" ? "active" : ""}`}
              onClick={() => handleMetricChange("energy")}
            >
              Energy Usage
            </button>
            <button
              className={`metric-btn ${selectedMetric === "maintenance" ? "active" : ""}`}
              onClick={() => handleMetricChange("maintenance")}
            >
              Maintenance
            </button>
          </div>
          <button className="refresh-btn" onClick={handleRefresh}>
            <FaSync className={isLoading ? "spinning" : ""} />
            Refresh
          </button>
        </div>
      </div>

      <div className="analytics-content">
        {isLoading ? (
          <div className="loading-container">
            <div className="loading-spinner"></div>
            <p>Loading analytics data...</p>
          </div>
        ) : reportConfig ? (
          <div className="powerbi-container">
            <PowerBIEmbed
              embedConfig={reportConfig}
              cssClassName="powerbi-report"
              getEmbeddedComponent={(embedObject) => {
                reportRef.current = embedObject
              }}
            />
          </div>
        ) : (
          <div className="placeholder-report">
            <div className="placeholder-header">
              <div className="placeholder-title"></div>
              <div className="placeholder-filters"></div>
            </div>
            <div className="placeholder-charts">
              <div className="placeholder-chart"></div>
              <div className="placeholder-chart"></div>
              <div className="placeholder-chart"></div>
              <div className="placeholder-chart"></div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default Analytics

